!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
AdaptiveSO2CPGSynPlas	adaptiveso2cpgsynplas.cpp	/^AdaptiveSO2CPGSynPlas::AdaptiveSO2CPGSynPlas(Neuron* perturbingNeuron)$/;"	f	class:AdaptiveSO2CPGSynPlas
AdaptiveSO2CPGSynPlas	adaptiveso2cpgsynplas.h	/^class AdaptiveSO2CPGSynPlas : public ExtendedSO2CPG{$/;"	c
EXTENDEDSO2CPG_H_	extendedso2cpg.h	21;"	d
ExtendedSO2CPG	extendedso2cpg.cpp	/^ExtendedSO2CPG::ExtendedSO2CPG(Neuron* perturbingNeuron):SO2CPG()$/;"	f	class:ExtendedSO2CPG
ExtendedSO2CPG	extendedso2cpg.h	/^class ExtendedSO2CPG : public SO2CPG{$/;"	c
P	extendedso2cpg.h	/^    Neuron* P;$/;"	m	class:ExtendedSO2CPG
PCPG	pcpg.cpp	/^PCPG::PCPG():set(2),countup(2),countdown(2)$/;"	f	class:PCPG
PCPG	pcpg.h	/^class PCPG : public ANN {$/;"	c
PCPG_H_	pcpg.h	2;"	d
PMN	pmn.cpp	/^PMN::PMN()$/;"	f	class:PMN
PMN	pmn.h	/^class PMN : public ANN {$/;"	c
PMN_H_	pmn.h	2;"	d
PSN	psn.cpp	/^PSN::PSN()$/;"	f	class:PSN
PSN	psn.h	/^class PSN : public ANN {$/;"	c
PSN_H_	psn.h	21;"	d
SO2CPG	so2cpg.cpp	/^SO2CPG::SO2CPG()$/;"	f	class:SO2CPG
SO2CPG	so2cpg.h	/^class SO2CPG : public ANN$/;"	c
SO2CPG_H_	so2cpg.h	21;"	d
VRN	vrn.cpp	/^VRN::VRN()$/;"	f	class:VRN
VRN	vrn.h	/^class VRN : public ANN {$/;"	c
VRN_H_	vrn.h	20;"	d
_ADAPTIVESO2CPGHEBB_H	adaptiveso2cpgsynplas.h	21;"	d
allowResets	extendedso2cpg.cpp	/^void ExtendedSO2CPG::allowResets(const bool allow)$/;"	f	class:ExtendedSO2CPG
alpha	so2cpg.h	/^    double alpha;$/;"	m	class:SO2CPG
betaDecayRate	adaptiveso2cpgsynplas.h	/^    double betaDecayRate;$/;"	m	class:AdaptiveSO2CPGSynPlas
betaHebbRate	adaptiveso2cpgsynplas.h	/^    double betaHebbRate;$/;"	m	class:AdaptiveSO2CPGSynPlas
betaZero	adaptiveso2cpgsynplas.h	/^    double betaZero;$/;"	m	class:AdaptiveSO2CPGSynPlas
countdown	pcpg.h	/^	std::vector<double> countdown;$/;"	m	class:PCPG
countdownold	pcpg.h	/^				std::vector<double> countdownold;$/;"	m	class:PCPG
countup	pcpg.h	/^	std::vector<double> countup;$/;"	m	class:PCPG
countupold	pcpg.h	/^				std::vector<double> countupold;$/;"	m	class:PCPG
deltaxdown	pcpg.h	/^				std::vector<double> deltaxdown;$/;"	m	class:PCPG
deltaxup	pcpg.h	/^				std::vector<double> deltaxup;$/;"	m	class:PCPG
diffset	pcpg.h	/^				std::vector<double> diffset ;$/;"	m	class:PCPG
enableFrequencyTable	so2cpg.cpp	/^void SO2CPG::enableFrequencyTable(const bool enabled)$/;"	f	class:SO2CPG
epsilon	extendedso2cpg.h	/^    double epsilon;$/;"	m	class:ExtendedSO2CPG
epsilonDecayRate	adaptiveso2cpgsynplas.h	/^    double epsilonDecayRate;$/;"	m	class:AdaptiveSO2CPGSynPlas
epsilonHebbRate	adaptiveso2cpgsynplas.h	/^    double epsilonHebbRate;$/;"	m	class:AdaptiveSO2CPGSynPlas
epsilonZero	adaptiveso2cpgsynplas.h	/^    double epsilonZero;$/;"	m	class:AdaptiveSO2CPGSynPlas
frequencyTable	so2cpg.h	/^    Interpolator2d frequencyTable;$/;"	m	class:SO2CPG
frequencyTableEnabled	so2cpg.h	/^    bool frequencyTableEnabled;$/;"	m	class:SO2CPG
gammaDecayRate	adaptiveso2cpgsynplas.h	/^    double gammaDecayRate;$/;"	m	class:AdaptiveSO2CPGSynPlas
gammaHebbRate	adaptiveso2cpgsynplas.h	/^    double gammaHebbRate;$/;"	m	class:AdaptiveSO2CPGSynPlas
gammaZero	adaptiveso2cpgsynplas.h	/^    double gammaZero;$/;"	m	class:AdaptiveSO2CPGSynPlas
getAlpha	so2cpg.cpp	/^const double& SO2CPG::getAlpha() const$/;"	f	class:SO2CPG
getBeta	extendedso2cpg.cpp	/^const double& ExtendedSO2CPG::getBeta()$/;"	f	class:ExtendedSO2CPG
getEpsilon	extendedso2cpg.cpp	/^const double& ExtendedSO2CPG::getEpsilon()$/;"	f	class:ExtendedSO2CPG
getFrequency	so2cpg.cpp	/^const double SO2CPG::getFrequency() const$/;"	f	class:SO2CPG
getGamma	extendedso2cpg.cpp	/^const double& ExtendedSO2CPG::getGamma()$/;"	f	class:ExtendedSO2CPG
getMu	extendedso2cpg.cpp	/^const double& ExtendedSO2CPG::getMu()$/;"	f	class:ExtendedSO2CPG
getNeuronOutput	vrn.cpp	/^Neuron* VRN::getNeuronOutput()$/;"	f	class:VRN
getNeuronX	vrn.cpp	/^Neuron* VRN::getNeuronX()$/;"	f	class:VRN
getNeuronY	vrn.cpp	/^Neuron* VRN::getNeuronY()$/;"	f	class:VRN
getPerturbation	extendedso2cpg.cpp	/^const double& ExtendedSO2CPG::getPerturbation()$/;"	f	class:ExtendedSO2CPG
getPerturbingNeuron	extendedso2cpg.cpp	/^Neuron* ExtendedSO2CPG::getPerturbingNeuron()$/;"	f	class:ExtendedSO2CPG
getPhi	so2cpg.cpp	/^const double SO2CPG::getPhi(const double & afrequency) const$/;"	f	class:SO2CPG
getPhi	so2cpg.cpp	/^const double& SO2CPG::getPhi() const$/;"	f	class:SO2CPG
mu	extendedso2cpg.h	/^    double mu;$/;"	m	class:ExtendedSO2CPG
pcpg_output	pcpg.h	/^				std::vector<double> pcpg_output;$/;"	m	class:PCPG
pcpg_step	pcpg.h	/^	std::vector<double> pcpg_step;$/;"	m	class:PCPG
phi	so2cpg.h	/^    double phi;$/;"	m	class:SO2CPG
postProcessing	extendedso2cpg.cpp	/^void ExtendedSO2CPG::postProcessing()$/;"	f	class:ExtendedSO2CPG
reset	extendedso2cpg.h	/^    virtual void reset() {};$/;"	f	class:ExtendedSO2CPG
resetsAllowed	extendedso2cpg.h	/^    bool resetsAllowed;$/;"	m	class:ExtendedSO2CPG
set	pcpg.h	/^	std::vector<double> set;$/;"	m	class:PCPG
setAlpha	so2cpg.cpp	/^void SO2CPG::setAlpha(const double& aalpha)$/;"	f	class:SO2CPG
setBeta	extendedso2cpg.cpp	/^void ExtendedSO2CPG::setBeta(const double& aBeta) {$/;"	f	class:ExtendedSO2CPG
setBetaDynamics	adaptiveso2cpgsynplas.cpp	/^void AdaptiveSO2CPGSynPlas::setBetaDynamics(const double& hebbRate, const double& decayRate, const double& zero)$/;"	f	class:AdaptiveSO2CPGSynPlas
setEpsilon	extendedso2cpg.cpp	/^void ExtendedSO2CPG::setEpsilon(const double& aepsilon) {$/;"	f	class:ExtendedSO2CPG
setEpsilonDynamics	adaptiveso2cpgsynplas.cpp	/^void AdaptiveSO2CPGSynPlas::setEpsilonDynamics(const double& hebbRate, const double& decayRate, const double& zero)$/;"	f	class:AdaptiveSO2CPGSynPlas
setFrequency	so2cpg.cpp	/^void SO2CPG::setFrequency(const double& afrequency)$/;"	f	class:SO2CPG
setGamma	extendedso2cpg.cpp	/^void ExtendedSO2CPG::setGamma(const double& agamma) {$/;"	f	class:ExtendedSO2CPG
setGammaDynamics	adaptiveso2cpgsynplas.cpp	/^void AdaptiveSO2CPGSynPlas::setGammaDynamics(const double& hebbRate, const double& decayRate, const double& zero)$/;"	f	class:AdaptiveSO2CPGSynPlas
setMu	extendedso2cpg.cpp	/^void ExtendedSO2CPG::setMu(const double& amu)$/;"	f	class:ExtendedSO2CPG
setPerturbation	extendedso2cpg.cpp	/^void ExtendedSO2CPG::setPerturbation(const double& aP)$/;"	f	class:ExtendedSO2CPG
setPhi	so2cpg.cpp	/^void SO2CPG::setPhi(const double& aphi)$/;"	f	class:SO2CPG
setold	pcpg.h	/^				std::vector<double> setold;$/;"	m	class:PCPG
shouldReset	extendedso2cpg.h	/^    virtual bool shouldReset() {return false;};$/;"	f	class:ExtendedSO2CPG
updateFrequencyTable	so2cpg.cpp	/^void SO2CPG::updateFrequencyTable()$/;"	f	class:SO2CPG
updateOutputs	pcpg.cpp	/^void PCPG::updateOutputs(){$/;"	f	class:PCPG
updateSO2Weights	so2cpg.cpp	/^void SO2CPG::updateSO2Weights()$/;"	f	class:SO2CPG
updateWeights	adaptiveso2cpgsynplas.cpp	/^void AdaptiveSO2CPGSynPlas::updateWeights() {$/;"	f	class:AdaptiveSO2CPGSynPlas
xdown	pcpg.h	/^				std::vector<double> xdown;$/;"	m	class:PCPG
xup	pcpg.h	/^				std::vector<double> xup;$/;"	m	class:PCPG
ydown	pcpg.h	/^				std::vector<double> ydown;$/;"	m	class:PCPG
yup	pcpg.h	/^				std::vector<double> yup;$/;"	m	class:PCPG
~ExtendedSO2CPG	extendedso2cpg.h	/^    virtual ~ExtendedSO2CPG() {};$/;"	f	class:ExtendedSO2CPG
